/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as CourseIndexImport } from './routes/course/index'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as PlanPlanPageImport } from './routes/plan/PlanPage'
import { Route as CourseCourseIdImport } from './routes/course/$courseId'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthProfileImport } from './routes/auth/profile'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthCallbackImport } from './routes/auth/callback'
import { Route as AdminManageuserImport } from './routes/admin/manage_user'
import { Route as AdminDashboardImport } from './routes/admin/dashboard'
import { Route as AdminCreatephaseImport } from './routes/admin/create_phase'
import { Route as AdminCreatelessonImport } from './routes/admin/create_lesson'
import { Route as AdminCreatectvImport } from './routes/admin/create_ctv'
import { Route as AdminCreatecourseImport } from './routes/admin/create_course'
import { Route as AdminCreatecontentImport } from './routes/admin/create_content'
import { Route as AdminAssignroleImport } from './routes/admin/Assign_role'
import { Route as SignSignupImport } from './routes/Sign/Signup'
import { Route as SignSigninImport } from './routes/Sign/Signin'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const CourseIndexRoute = CourseIndexImport.update({
  id: '/course/',
  path: '/course/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const PlanPlanPageRoute = PlanPlanPageImport.update({
  id: '/plan/PlanPage',
  path: '/plan/PlanPage',
  getParentRoute: () => rootRoute,
} as any)

const CourseCourseIdRoute = CourseCourseIdImport.update({
  id: '/course/$courseId',
  path: '/course/$courseId',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthCallbackRoute = AuthCallbackImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRoute,
} as any)

const AdminManageuserRoute = AdminManageuserImport.update({
  id: '/admin/manage_user',
  path: '/admin/manage_user',
  getParentRoute: () => rootRoute,
} as any)

const AdminDashboardRoute = AdminDashboardImport.update({
  id: '/admin/dashboard',
  path: '/admin/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreatephaseRoute = AdminCreatephaseImport.update({
  id: '/admin/create_phase',
  path: '/admin/create_phase',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreatelessonRoute = AdminCreatelessonImport.update({
  id: '/admin/create_lesson',
  path: '/admin/create_lesson',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreatectvRoute = AdminCreatectvImport.update({
  id: '/admin/create_ctv',
  path: '/admin/create_ctv',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreatecourseRoute = AdminCreatecourseImport.update({
  id: '/admin/create_course',
  path: '/admin/create_course',
  getParentRoute: () => rootRoute,
} as any)

const AdminCreatecontentRoute = AdminCreatecontentImport.update({
  id: '/admin/create_content',
  path: '/admin/create_content',
  getParentRoute: () => rootRoute,
} as any)

const AdminAssignroleRoute = AdminAssignroleImport.update({
  id: '/admin/Assign_role',
  path: '/admin/Assign_role',
  getParentRoute: () => rootRoute,
} as any)

const SignSignupRoute = SignSignupImport.update({
  id: '/Sign/Signup',
  path: '/Sign/Signup',
  getParentRoute: () => rootRoute,
} as any)

const SignSigninRoute = SignSigninImport.update({
  id: '/Sign/Signin',
  path: '/Sign/Signin',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/Sign/Signin': {
      id: '/Sign/Signin'
      path: '/Sign/Signin'
      fullPath: '/Sign/Signin'
      preLoaderRoute: typeof SignSigninImport
      parentRoute: typeof rootRoute
    }
    '/Sign/Signup': {
      id: '/Sign/Signup'
      path: '/Sign/Signup'
      fullPath: '/Sign/Signup'
      preLoaderRoute: typeof SignSignupImport
      parentRoute: typeof rootRoute
    }
    '/admin/Assign_role': {
      id: '/admin/Assign_role'
      path: '/admin/Assign_role'
      fullPath: '/admin/Assign_role'
      preLoaderRoute: typeof AdminAssignroleImport
      parentRoute: typeof rootRoute
    }
    '/admin/create_content': {
      id: '/admin/create_content'
      path: '/admin/create_content'
      fullPath: '/admin/create_content'
      preLoaderRoute: typeof AdminCreatecontentImport
      parentRoute: typeof rootRoute
    }
    '/admin/create_course': {
      id: '/admin/create_course'
      path: '/admin/create_course'
      fullPath: '/admin/create_course'
      preLoaderRoute: typeof AdminCreatecourseImport
      parentRoute: typeof rootRoute
    }
    '/admin/create_ctv': {
      id: '/admin/create_ctv'
      path: '/admin/create_ctv'
      fullPath: '/admin/create_ctv'
      preLoaderRoute: typeof AdminCreatectvImport
      parentRoute: typeof rootRoute
    }
    '/admin/create_lesson': {
      id: '/admin/create_lesson'
      path: '/admin/create_lesson'
      fullPath: '/admin/create_lesson'
      preLoaderRoute: typeof AdminCreatelessonImport
      parentRoute: typeof rootRoute
    }
    '/admin/create_phase': {
      id: '/admin/create_phase'
      path: '/admin/create_phase'
      fullPath: '/admin/create_phase'
      preLoaderRoute: typeof AdminCreatephaseImport
      parentRoute: typeof rootRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/admin/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/manage_user': {
      id: '/admin/manage_user'
      path: '/admin/manage_user'
      fullPath: '/admin/manage_user'
      preLoaderRoute: typeof AdminManageuserImport
      parentRoute: typeof rootRoute
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/course/$courseId': {
      id: '/course/$courseId'
      path: '/course/$courseId'
      fullPath: '/course/$courseId'
      preLoaderRoute: typeof CourseCourseIdImport
      parentRoute: typeof rootRoute
    }
    '/plan/PlanPage': {
      id: '/plan/PlanPage'
      path: '/plan/PlanPage'
      fullPath: '/plan/PlanPage'
      preLoaderRoute: typeof PlanPlanPageImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/course/': {
      id: '/course/'
      path: '/course'
      fullPath: '/course'
      preLoaderRoute: typeof CourseIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/admin/Assign_role': typeof AdminAssignroleRoute
  '/admin/create_content': typeof AdminCreatecontentRoute
  '/admin/create_course': typeof AdminCreatecourseRoute
  '/admin/create_ctv': typeof AdminCreatectvRoute
  '/admin/create_lesson': typeof AdminCreatelessonRoute
  '/admin/create_phase': typeof AdminCreatephaseRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/manage_user': typeof AdminManageuserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/course/$courseId': typeof CourseCourseIdRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/course': typeof CourseIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/admin/Assign_role': typeof AdminAssignroleRoute
  '/admin/create_content': typeof AdminCreatecontentRoute
  '/admin/create_course': typeof AdminCreatecourseRoute
  '/admin/create_ctv': typeof AdminCreatectvRoute
  '/admin/create_lesson': typeof AdminCreatelessonRoute
  '/admin/create_phase': typeof AdminCreatephaseRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/manage_user': typeof AdminManageuserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/course/$courseId': typeof CourseCourseIdRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/course': typeof CourseIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/admin/Assign_role': typeof AdminAssignroleRoute
  '/admin/create_content': typeof AdminCreatecontentRoute
  '/admin/create_course': typeof AdminCreatecourseRoute
  '/admin/create_ctv': typeof AdminCreatectvRoute
  '/admin/create_lesson': typeof AdminCreatelessonRoute
  '/admin/create_phase': typeof AdminCreatephaseRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/manage_user': typeof AdminManageuserRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/course/$courseId': typeof CourseCourseIdRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/course/': typeof CourseIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/admin/Assign_role'
    | '/admin/create_content'
    | '/admin/create_course'
    | '/admin/create_ctv'
    | '/admin/create_lesson'
    | '/admin/create_phase'
    | '/admin/dashboard'
    | '/admin/manage_user'
    | '/auth/callback'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/course/$courseId'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/course'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/admin/Assign_role'
    | '/admin/create_content'
    | '/admin/create_course'
    | '/admin/create_ctv'
    | '/admin/create_lesson'
    | '/admin/create_phase'
    | '/admin/dashboard'
    | '/admin/manage_user'
    | '/auth/callback'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/course/$courseId'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/course'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/admin/Assign_role'
    | '/admin/create_content'
    | '/admin/create_course'
    | '/admin/create_ctv'
    | '/admin/create_lesson'
    | '/admin/create_phase'
    | '/admin/dashboard'
    | '/admin/manage_user'
    | '/auth/callback'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/course/$courseId'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/course/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  SignSigninRoute: typeof SignSigninRoute
  SignSignupRoute: typeof SignSignupRoute
  AdminAssignroleRoute: typeof AdminAssignroleRoute
  AdminCreatecontentRoute: typeof AdminCreatecontentRoute
  AdminCreatecourseRoute: typeof AdminCreatecourseRoute
  AdminCreatectvRoute: typeof AdminCreatectvRoute
  AdminCreatelessonRoute: typeof AdminCreatelessonRoute
  AdminCreatephaseRoute: typeof AdminCreatephaseRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminManageuserRoute: typeof AdminManageuserRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  CourseCourseIdRoute: typeof CourseCourseIdRoute
  PlanPlanPageRoute: typeof PlanPlanPageRoute
  PostsPostIdRoute: typeof PostsPostIdRoute
  CourseIndexRoute: typeof CourseIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  SignSigninRoute: SignSigninRoute,
  SignSignupRoute: SignSignupRoute,
  AdminAssignroleRoute: AdminAssignroleRoute,
  AdminCreatecontentRoute: AdminCreatecontentRoute,
  AdminCreatecourseRoute: AdminCreatecourseRoute,
  AdminCreatectvRoute: AdminCreatectvRoute,
  AdminCreatelessonRoute: AdminCreatelessonRoute,
  AdminCreatephaseRoute: AdminCreatephaseRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminManageuserRoute: AdminManageuserRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  CourseCourseIdRoute: CourseCourseIdRoute,
  PlanPlanPageRoute: PlanPlanPageRoute,
  PostsPostIdRoute: PostsPostIdRoute,
  CourseIndexRoute: CourseIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/Sign/Signin",
        "/Sign/Signup",
        "/admin/Assign_role",
        "/admin/create_content",
        "/admin/create_course",
        "/admin/create_ctv",
        "/admin/create_lesson",
        "/admin/create_phase",
        "/admin/dashboard",
        "/admin/manage_user",
        "/auth/callback",
        "/auth/login",
        "/auth/profile",
        "/auth/register",
        "/course/$courseId",
        "/plan/PlanPage",
        "/posts/$postId",
        "/course/",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/Sign/Signin": {
      "filePath": "Sign/Signin.tsx"
    },
    "/Sign/Signup": {
      "filePath": "Sign/Signup.tsx"
    },
    "/admin/Assign_role": {
      "filePath": "admin/Assign_role.tsx"
    },
    "/admin/create_content": {
      "filePath": "admin/create_content.tsx"
    },
    "/admin/create_course": {
      "filePath": "admin/create_course.tsx"
    },
    "/admin/create_ctv": {
      "filePath": "admin/create_ctv.tsx"
    },
    "/admin/create_lesson": {
      "filePath": "admin/create_lesson.tsx"
    },
    "/admin/create_phase": {
      "filePath": "admin/create_phase.tsx"
    },
    "/admin/dashboard": {
      "filePath": "admin/dashboard.tsx"
    },
    "/admin/manage_user": {
      "filePath": "admin/manage_user.tsx"
    },
    "/auth/callback": {
      "filePath": "auth/callback.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/profile": {
      "filePath": "auth/profile.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/course/$courseId": {
      "filePath": "course/$courseId.tsx"
    },
    "/plan/PlanPage": {
      "filePath": "plan/PlanPage.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx"
    },
    "/course/": {
      "filePath": "course/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
