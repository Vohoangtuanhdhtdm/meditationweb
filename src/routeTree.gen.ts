/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MeditateImport } from './routes/meditate'
import { Route as DmtImport } from './routes/dmt'
import { Route as DisciplineImport } from './routes/discipline'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as PlanPlanPageImport } from './routes/plan/PlanPage'
import { Route as SignSignupImport } from './routes/Sign/Signup'
import { Route as SignSigninImport } from './routes/Sign/Signin'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const MeditateRoute = MeditateImport.update({
  id: '/meditate',
  path: '/meditate',
  getParentRoute: () => rootRoute,
} as any)

const DmtRoute = DmtImport.update({
  id: '/dmt',
  path: '/dmt',
  getParentRoute: () => rootRoute,
} as any)

const DisciplineRoute = DisciplineImport.update({
  id: '/discipline',
  path: '/discipline',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const PlanPlanPageRoute = PlanPlanPageImport.update({
  id: '/plan/PlanPage',
  path: '/plan/PlanPage',
  getParentRoute: () => rootRoute,
} as any)

const SignSignupRoute = SignSignupImport.update({
  id: '/Sign/Signup',
  path: '/Sign/Signup',
  getParentRoute: () => rootRoute,
} as any)

const SignSigninRoute = SignSigninImport.update({
  id: '/Sign/Signin',
  path: '/Sign/Signin',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/discipline': {
      id: '/discipline'
      path: '/discipline'
      fullPath: '/discipline'
      preLoaderRoute: typeof DisciplineImport
      parentRoute: typeof rootRoute
    }
    '/dmt': {
      id: '/dmt'
      path: '/dmt'
      fullPath: '/dmt'
      preLoaderRoute: typeof DmtImport
      parentRoute: typeof rootRoute
    }
    '/meditate': {
      id: '/meditate'
      path: '/meditate'
      fullPath: '/meditate'
      preLoaderRoute: typeof MeditateImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/Sign/Signin': {
      id: '/Sign/Signin'
      path: '/Sign/Signin'
      fullPath: '/Sign/Signin'
      preLoaderRoute: typeof SignSigninImport
      parentRoute: typeof rootRoute
    }
    '/Sign/Signup': {
      id: '/Sign/Signup'
      path: '/Sign/Signup'
      fullPath: '/Sign/Signup'
      preLoaderRoute: typeof SignSignupImport
      parentRoute: typeof rootRoute
    }
    '/plan/PlanPage': {
      id: '/plan/PlanPage'
      path: '/plan/PlanPage'
      fullPath: '/plan/PlanPage'
      preLoaderRoute: typeof PlanPlanPageImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/discipline': typeof DisciplineRoute
  '/dmt': typeof DmtRoute
  '/meditate': typeof MeditateRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/discipline': typeof DisciplineRoute
  '/dmt': typeof DmtRoute
  '/meditate': typeof MeditateRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/discipline': typeof DisciplineRoute
  '/dmt': typeof DmtRoute
  '/meditate': typeof MeditateRoute
  '/about': typeof AboutLazyRoute
  '/Sign/Signin': typeof SignSigninRoute
  '/Sign/Signup': typeof SignSignupRoute
  '/plan/PlanPage': typeof PlanPlanPageRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/discipline'
    | '/dmt'
    | '/meditate'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/discipline'
    | '/dmt'
    | '/meditate'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/discipline'
    | '/dmt'
    | '/meditate'
    | '/about'
    | '/Sign/Signin'
    | '/Sign/Signup'
    | '/plan/PlanPage'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DisciplineRoute: typeof DisciplineRoute
  DmtRoute: typeof DmtRoute
  MeditateRoute: typeof MeditateRoute
  AboutLazyRoute: typeof AboutLazyRoute
  SignSigninRoute: typeof SignSigninRoute
  SignSignupRoute: typeof SignSignupRoute
  PlanPlanPageRoute: typeof PlanPlanPageRoute
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DisciplineRoute: DisciplineRoute,
  DmtRoute: DmtRoute,
  MeditateRoute: MeditateRoute,
  AboutLazyRoute: AboutLazyRoute,
  SignSigninRoute: SignSigninRoute,
  SignSignupRoute: SignSignupRoute,
  PlanPlanPageRoute: PlanPlanPageRoute,
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/discipline",
        "/dmt",
        "/meditate",
        "/about",
        "/Sign/Signin",
        "/Sign/Signup",
        "/plan/PlanPage",
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/discipline": {
      "filePath": "discipline.tsx"
    },
    "/dmt": {
      "filePath": "dmt.tsx"
    },
    "/meditate": {
      "filePath": "meditate.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/Sign/Signin": {
      "filePath": "Sign/Signin.tsx"
    },
    "/Sign/Signup": {
      "filePath": "Sign/Signup.tsx"
    },
    "/plan/PlanPage": {
      "filePath": "plan/PlanPage.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */